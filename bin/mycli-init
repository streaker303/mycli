#!/usr/bin/env node
const { program } = require('commander');
const path = require('path');
const exists = require('fs').existsSync;
const ora = require('ora');
const download = require('download-git-repo');
const inquirer = require('inquirer');
const chalk = require('chalk');
const rimraf = require('rimraf')
const figlet = require('figlet');
const generator = require("../lib/generator");

program.parse(process.argv);

const spinner = ora();
const projectName = program.args[0];

figlet(projectName, (err, data) => {
  if (err) {
    console.log(chalk.red(err.message.trim));
    return;
  }
  console.log(chalk.yellow(data));
});

if (exists(projectName)) {
  inquirer.prompt([{
    type: 'confirm',
    message: '目录已存在是否覆盖？',
    name: 'ok'
  }]).then(answers => {
    if (answers.ok) {
      console.log(chalk.yellow('原有项目删除中......'))
      rimraf(path.resolve(projectName), {},(err) => {
        if (err) {
          console.log(chalk.red(err.message.trim()));
          return;
        }
        console.log(chalk.green('原有项目删除成功！'));
        downloadTemplate().then(() => {
          return inquirer.prompt([{
            name: 'version',
            message: '项目的版本号',
            default: '1.0.0'
          }, {
            name: 'description',
            message: '项目的简介',
            default: `A project`
          }]).then(answer => {
            generator({version: answer.version, description: answer.description, projectName}, path.resolve(projectName), path.resolve(projectName))
          })
        }).catch(() => {})
      })
    }
  }).catch(err => console.log(chalk.red(err.message.trim())));
} else {
  downloadTemplate().then(() => {
    return inquirer.prompt([{
      name: 'version',
      message: '项目的版本号',
      default: '1.0.0'
    }, {
      name: 'description',
      message: '项目的简介',
      default: `A project`
    }]).then(answer => {
      generator({version: answer.version, description: answer.description, projectName}, path.resolve(projectName), path.resolve(projectName))
    })
  }).catch(() => {})
}

function downloadTemplate() {
  spinner.start('下载模板中......');
  return new Promise((resolve, reject) => {
    download('direct:git@gitee.com:streaker303/platform.git', projectName, {clone: true}, (err) => {
      if (err) {
        spinner.fail('下载失败');
        reject(err);
      } else {
        spinner.succeed('下载成功！');
        resolve();
      }
    });
  })
}